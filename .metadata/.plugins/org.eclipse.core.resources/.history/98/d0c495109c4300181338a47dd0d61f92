package priv.rsl.jdbc.spring;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import priv.rsl.jdbc.JdbcUtils;
import priv.rsl.jdbc.domain.User;

/** 
* @ClassName: JdbcTemplateTest 
* @Description: TODO  
* 使用spring的两个jar包来进行数据库的操作。两个jar包分别是：spring-jdbc.jar和commons-logging.jar
* 他们的原理实际就是对jdbc的封装，也就是相当于我们自己通过定义接口，将接口的实现作为参数来处理结果集一样
* 
* @author rsl
* @date 2018年4月17日 
*  
*/
public class JdbcTemplateTest {
    
  //new该工具类的对象,需要数据源作为参数
  static JdbcTemplate jdbc = new JdbcTemplate(JdbcUtils.getDataSource());
  	
    public static void main(String[] args) {
	User user = findUser1("rsl");
	System.out.println(user);
	
	System.out.println(findUser2(3));
	
	System.out.println(getUserCount());
    }
    
    /** 
    * @Title: findUser 
    * @Description: TODO  
    * 通过用户名查找User对象：
    * 使用spring的工具类的queryForObject(sql, args, new RowMapper<T>()方法来完成，
    * 与自己定义的DaoTemplate相似，即也是通过行映射器接口来实现具体的操作。
    * 
    * @param name
    * @return
    */
    static User findUser(String name) {
	
	//该方法所需要的参数
	Object[] args = new Object[] {name};
	
	//参数sql语句
	String sql = "select id,name,password,birthday,money from user where name =?";
	
	//调用方法并重写接口的方法
	Object user = jdbc.queryForObject(sql, args, new RowMapper<Object>() {

	    @Override
	    public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
		User user = new User();
		user.setId(rs.getInt("id"));
		user.setName(rs.getString("name"));
		user.setPassword(rs.getString("password"));
		user.setBirthday(rs.getDate("birthday"));
		user.setMoney(rs.getFloat("money"));
		
		return user;
	    }

	});
	return (User)user;
    }
    
    /** 
    * @Title: findUser1 
    * @Description: TODO  
    * 工具类里面有行映射器的实现，只需要把相应的类的Class作为参数即可，这样就不用写具体的实现
    * 效果和findUser效果一样
    * @param name
    * @return
    */
    static User findUser1(String name) {
	//该方法所需要的参数
	Object[] args = new Object[] {name};
	
	//参数sql语句
	String sql = "select id,name,password,birthday,money from user where name =?";
	
	//调用方法并重写接口的方法
	Object user = jdbc.queryForObject(sql, args,new BeanPropertyRowMapper<>(User.class) );
	return (User)user;
    }
    
    /** 
    * @Title: findUser2 
    * @Description: TODO  
    * 工具类中的其他查询方法：查询多个对象
    * 
    * @param id
    * @return
    */
    static List<User> findUser2(int id) {
	//该方法所需要的参数
	Object[] args = new Object[] {id};
	
	//参数sql语句
	String sql = "select id,name,password,birthday,money from user where id<?";
	
	//调用方法并重写接口的方法
	List<User> users = jdbc.query(sql, args,new BeanPropertyRowMapper<>(User.class) );
	return users;
    }
    
    static int getUserCount() {
	String sql ="select count(*) from user;";
	return jdbc.queryForObject(sql, Integer.class);
    }


}
